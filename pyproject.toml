# UV Workspace Configuration
[tool.uv.workspace]
members = [
    "src/mAIgic_core",
    "src/mAIgic_speech",
    "src/mAIgic_speech/speech_api", 
    "src/mAIgic_speech/speech_openai_impl",
    "src/mAIgic_integrations",
    "src/mAIgic_integrations/email/email_api",
    "src/mAIgic_integrations/email/email_gmail_impl",
    "src/mAIgic_integrations/calendar",
    "src/mAIgic_integrations/calendar/calendar_api",
]

[project]
name = "mAIgic-assistant"
version = "0.1.0"
description = "mAIgic Assistant - Meta-package for AI personal assistant framework"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    # Meta-package depends on core components
    "maigic-core>=0.1.0",
    "maigic-integrations>=0.1.0",
]

[tool.uv.sources]
maigic-core = { workspace = true }
maigic-integrations = { workspace = true }
maigic-speech = { workspace = true }
maigic-speech-api = { workspace = true }
maigic-speech-openai-impl = { workspace = true }
maigic-email-api = { workspace = true }
maigic-email-gmail = { workspace = true }
maigic-calendar = { workspace = true }
maigic-calendar-api = { workspace = true }

[project.optional-dependencies]
# Speech processing features
speech = [
    "maigic-speech[openai]>=0.1.0",
]

# Email integration features
email = [
    "maigic-integrations[gmail]>=0.1.0",
]

# Calendar integration features
calendar = [
    "maigic-integrations[calendar]>=0.1.0",
]

# Development and testing dependencies
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0", 
    "pytest-asyncio>=0.21.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "build>=0.10.0",
]

# Install everything for full development
all = [
    "mAIgic-assistant[email,speech,calendar]",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# Tell hatchling to include the new component structure
[tool.hatch.build.targets.wheel]
packages = [
    "src/mAIgic_speech", 
    "src/mAIgic_core", 
    "src/mAIgic_integrations"
]


[tool.pytest.ini_options]
testpaths = ["src/mAIgic_speech", "src/mAIgic_core", "src/mAIgic_integrations", "tests"]  # Test all components
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = [
    "--cov=src/mAIgic_speech",
    "--cov=src/mAIgic_core", 
    "--cov=src/mAIgic_integrations",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=80"
]
asyncio_mode = "auto"

[tool.ruff.lint]
select = ["E", "F", "I", "N", "W"]
ignore = ["E501", "N999"]  # Line too long, Invalid module name (allow mAIgic branding)

[tool.mypy]
python_version = "3.12"
warn_return_any = true
strict = true
ignore_missing_imports = true
exclude = [
    "examples/",  # Exclude examples from strict type checking
    "tests/",     # Exclude test files from strict type checking
]
